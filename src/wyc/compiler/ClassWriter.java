// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package wyc.compiler;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

import wyil.ModuleLoader;
import wyil.lang.Module;
import wyil.util.Logger;
import wyil.io.*;
import wyjvm.io.ClassFileWriter;
import wyjvm.lang.ClassFile;
import wyjvm.util.DeadCodeElimination;
import wyjvm.util.Validation;

public class ClassWriter implements Compiler.Stage {
	private ClassFileBuilder classBuilder;
	private final boolean validate;
	private final boolean deadCode;
	
	public ClassWriter(ModuleLoader loader) {
		this(loader,Collections.EMPTY_MAP);
	}
	
	public ClassWriter(ModuleLoader loader, Map<String, String> options) {
		classBuilder = new ClassFileBuilder(loader, wyc.Main.MAJOR_VERSION,
				wyc.Main.MINOR_VERSION);
		validate = !options.containsKey("nvalidate");
		deadCode = !options.containsKey("ndeadcode");		
	}	
	
	public String name() {
		return "class file writer";
	}
	
	public Module process(Module m, Logger logout) {
		long start = System.currentTimeMillis();
		ClassFile file = classBuilder.build(m);		
		if(validate) {			
			// validate generated bytecode
			new Validation().apply(file);
		}
		if(deadCode) {
			// eliminate any dead code that was introduced.		
			new DeadCodeElimination().apply(file);
		}
		
		// calculate filename
		String filename = m.filename().replace(".whiley", ".class");
		try {
			FileOutputStream out = new FileOutputStream(filename);		
			ClassFileWriter writer = new ClassFileWriter(out,null);			
			writer.write(file);
			logout.logTimedMessage("[" + m.filename() + "] class file written",
					System.currentTimeMillis() - start);
		} catch(IOException ex) {
			logout.logTimedMessage("[" + m.filename()
					+ "] failed writing class file (" + ex.getMessage() + ")",
					System.currentTimeMillis() - start);
		}
		return m;
	}	
	
}
