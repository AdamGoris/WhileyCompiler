term And({Term})
term Or({Term})
term Not(Term)
term Var(string)
term True
term False

class Bool as True | False
class Term as And | Or | Not | Bool | Var

rewrite Not(Bool t):
    => True, if t == False
    => False, if t == True

rewrite Not(And({Term}) t):
    => let rs = { Not(x) | x in t#0 } 
       in Or(rs)

rewrite Not(Or({Term}) t):
    => let rs = { Not(x) | x in t#0 } 
       in And(rs)

rewrite And({Term} xs):
    => False, if False in xs
    => True, if xs == {True}
    => False, if some { x in xs | Not(x) in xs }
    => let ys = { x#0 | x in xs, x ~= And({*}) } 
       in And(xs - {True})

rewrite Or({Term} xs):
    => True, if True in xs
    => False, if xs == {False}
    => True, if some { x in xs | Not(x) in xs }
    => Or(xs - {False})
