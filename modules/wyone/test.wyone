term False
term True
class Bool as True | False
term And{Term}
term Equals{|Term,Term|}
term Num(int)
term Var(string)

class Term as Bool | And | Equals | Var

rewrite And{True x, Term... rest}:
    => And (rest)

rewrite And{Equals{|* x, * y|},Equals{|* u, * v|}, Term... rs}:
    => And({Equals{|x,y|},Equals{|u,v|},Equals{|x,v|}} ++ rs), if y == u && !(x is Num && v is Num)

rewrite Equals{|Num(int x), Num(int y)|}:
    => True, if x == y
    => False









