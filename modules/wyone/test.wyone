include "examples/logic.wyone"
include "examples/numerics.wyone"

// ====================================================================
// Equals (rearrangement)
// ====================================================================

// reduce Equals{Sum{|AExpr... xs|}, Expr y}:
//     => Equals{Num(0), Sum(xs ++ Mul{|Num(-1),y|})}, if !(y is Num(int) && *y == 0)

// reduce And{Equals{Num(int n), Sum{|Var(string s) v, Expr... es|}}, BExpr... rest}:
//     => let nes = Mul{|Num(-1),Sum(es)|},
//            nrest = { r[v\nes] | r in rest }
//        in And (Assign[s,nes] ++ nrest), if n == 0
