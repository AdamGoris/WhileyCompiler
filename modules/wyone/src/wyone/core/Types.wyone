// This file is part of the Whiley-to-Java Compiler (wyjc).
//
// The Whiley-to-Java Compiler is free software; you can redistribute 
// it and/or modify it under the terms of the GNU General Public 
// License as published by the Free Software Foundation; either 
// version 3 of the License, or (at your option) any later version.
//
// The Whiley-to-Java Compiler is distributed in the hope that it 
// will be useful, but WITHOUT ANY WARRANTY; without even the 
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
// PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public 
// License along with the Whiley-to-Java Compiler. If not, see 
// <http://www.gnu.org/licenses/>
//
// Copyright 2010, David James Pearce. 

//package wyone.core

// ====================================================================
// Overview
// ====================================================================
//
// Defines a language of types similar to that found in this paper:
// 
// * "Sound and Complete Flow Typing with Unions, Intersections and 
//    Negations", David J. Pearce, In Proceedings of VMCAI, 2013.

// ====================================================================
// Not
// ====================================================================

term Not(Type)

reduce Not(Any):
    => Void

reduce Not(Void):
    => Any

reduce Not(Or{Type... es}):
    => let ns = { Not(e) | e in es }
       in And(ns)

reduce Not(And{Type... es}):
    => let ns = { Not(e) | e in es }
       in Or(ns)

// ====================================================================
// And
// ====================================================================

term And{Type...}

reduce And{Type t}:
    => t

reduce And{And{Type... xs}, Type... ys}:
    => And (xs ++ ys)

reduce And{Or{Type... xs}, Type... ys}:
    => let zs = { And(x ++ ys) | x in xs }
       in Or (zs)

// ====================================================================
// Or
// ====================================================================

term Or{Type...}

reduce Or{Type t}:
    => t

reduce Or{Or{Type... xs}, Type... ys}:
    => Or (xs ++ ys)

// ====================================================================
// Atoms
// ====================================================================

term Any
term Void
term Bool
term Int
term Real
term String

define Proton as Any | Void | Bool | Int | Real | String
define Atom as Proton | Not(Proton)

reduce And{Void, Type... xs}:
    => Void

reduce And{Any, Type... xs}:
    => And(xs)

reduce And{Proton a1, Proton a2, Type... ts}:
    => Void, if a1 != a2 && !(a2 is Any)

reduce And{Proton a1, Not(Proton a2), Type... ts}:
    => Void, if a1 == a2
    => And (a1 ++ ts), if a2 != Any

reduce Or{Any, Type... xs}:
    => Any

reduce Or{Void, Type... xs}:
    => Or(xs)

// ====================================================================
// Ref
// ====================================================================

term Ref(Type)

reduce Ref(Void):
    => Void

reduce And{Ref(Type t1), Ref(Type t2), Type... ts}:
    => And(Ref(And{t1,t2}) ++ ts)

reduce Or{Ref(Any) t, Ref(Type), Type... ts}:
    => Or (t ++ ts)

// ====================================================================
// Meta
// ====================================================================

term Meta(Type)

reduce And{Meta(Type t1), Meta(Type t2), Type... ts}:
    => And(Meta(And{t1,t2}) ++ ts)

reduce Or{Meta(Any) t, Meta(Type), Type... ts}:
    => Or (t ++ ts)

// ====================================================================
// Term
// ====================================================================

term Term[string,Type] // name,contents

reduce And{Term[string s1, Type t1], Term[string s2, Type t2], Type... ts}:
    => And(Term[s1,And{t1,t2}] ++ ts), if s1 == s2
    => Void

// ====================================================================
// Nominal
// ====================================================================

term Nominal[string,Type] // name,contents

reduce Nominal[string,Type t]:
    => t

// ====================================================================
// Fun
// ====================================================================
term Fun[Type,Type] // return, parameter

// ====================================================================
// Set
// ====================================================================
term Set[bool,{Type...}]

reduce Set[bool b, {Void, Type... ts}]:
    => Set[b,ts]

// MISSING INTERSECTION

// ====================================================================
// Bag
// ====================================================================

term Bag[bool,{|Type...|}]

reduce Bag[bool b, {|Void, Type... ts|}]:
    => Bag[b,ts]

// MISSING INTERSECTION

// ====================================================================
// List
// ====================================================================

term List[bool,[Type...]]

reduce List[bool b, [Type... t1s]]:
    => Void, if Void in t1s

reduce And{List[bool ub1, [Type... t1s]], List[bool ub2, [Type... t2s]], Type... ts}:
    => Void, if !ub1 && !ub2 && |t1s| != |t2s|
    => Void, if ub1 && !ub2 && |t1s| > |t2s|+1
    => Void, if !ub1 && ub2 && (|t2s| > (|t1s|+1))
    => And{List[false,[Void]]}, if !(ub1 && ub2)
//     => And{List[False, [ And({t1s[i],t2s[i]}) | i in 0..|tls|]], Type... ts}:

// ====================================================================
// General Type
// ====================================================================

define Type as Atom | Not | Ref | Meta | Nominal | Or | And | Set | Bag | List   

