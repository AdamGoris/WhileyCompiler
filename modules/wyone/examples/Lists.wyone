// ====================================================================
// Boolean Expressions
// ====================================================================
term True
term False
class Bool as True | False
class BExpr as Bool | And

term And{BExpr...}

reduce And{BExpr x}:
    => x

reduce And{And{BExpr... xs}, BExpr... ys}:
    => And (xs ++ ys)

reduce And{Bool b, BExpr... xs}:
    => False, if b == False
    => True, if |xs| == 0
    => And (xs)

// ====================================================================
// List Expressions
// ====================================================================

term List[Expr...]
term IndexOf[Expr,Expr]
term Update[Expr,Expr,Expr]
term LengthOf(Expr)

reduce LengthOf(List[Expr... ls]):
    => |ls|

//reduce Update[List[Expr... ls],Num(int idx),Expr val]:
//    => ls[idx] = val

//reduce IndexOf[List[Expr... ls], Num(int i)]:
//    => ls[i]

// ====================================================================
// Expressions
// ====================================================================

term Num(int)
term Var(string)

class Expr as List | Num | Var