
// ====================================================================
// Sum
// ====================================================================

term Sum{Expr...}

rewrite Sum{}:
    => Num(0) // e.g. 0+0+0

rewrite Sum{Expr e}:
    => e

rewrite Sum{Num(int x), Expr... rest}:
    => Sum(rest), if x == 0

rewrite Sum{Num(int x), Num(int y), Expr... rest}:
    => Sum (Num(x+y) ++ rest)

rewrite Sum{Expr x, Expr y, Expr... rest}:
    => Sum (Mul{Num(2),y} ++ rest), if x == y

rewrite Sum{Sum{Expr... xs}, Expr... ys}:
    => Sum (xs ++ ys)

// ====================================================================
// Sum
// ====================================================================

term Mul{Expr...}

rewrite Mul{}:
    => Num(1) // e.g. 1*1*1 ...

rewrite Mul{Expr e}:
    => e

rewrite Mul{Num(int x), Expr... rest}:
    => Mul(rest), if x == 1
    => Num(0), if x == 0

rewrite Mul{Num(int x), Num(int y), Expr... rest}:
    => Mul (Num(x*y) ++ rest)

rewrite Mul{Mul{Expr... xs}, Expr... ys}:
    => Mul (xs ++ ys)

// rewrite Mul {Sum{Expr... xs}, Expr... ys}:
   
// ====================================================================
// Expr
// ====================================================================

term Num(int)
term Var(string)

class Expr as Num | Var | Sum | Mul
