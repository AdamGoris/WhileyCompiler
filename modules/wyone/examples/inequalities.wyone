// ====================================================================
// Bool
// ====================================================================

term True
term False
class Bool as True | False

// ====================================================================
// And
// ====================================================================

term And{Term...}

reduce And{Bool b, Term... xs}:
    => False, if b == False
    => True, if |xs| == 0
    => And (xs)

// ====================================================================
// LessThan
// ====================================================================

term LessThan[Expr,Expr]

reduce LessThan[Num(int x), Num(int y)]:
    => True, if x < y
    => False

reduce LessThan[Var x, Var y]:
    => False, if x == y

infer And{LessThan[Expr x, Expr y], LessThan[Expr u, Expr v], Term... rest}:
    => And ({LessThan[x,y], LessThan[u,v], LessThan[x,v]} ++ rest), if y == u

// ====================================================================
// Expr
// ====================================================================

term Num(int)
term Var(string)

class Expr as Num | Var | LessThan

// ====================================================================
// Term
// ====================================================================

class Term as Bool | LessThan