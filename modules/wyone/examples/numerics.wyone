include "variables.wyone"

// ====================================================================
// Mul
// ====================================================================

term Mul[int,{|AExpr...|}]

reduce Mul[int n, {|AExpr... rest|}]:
    => Num(n), if n == 0 || |rest| == 0

reduce Mul[int x, {|Num(int y), AExpr... rest|}]:
    => Mul[x*y,rest]

reduce Mul[int n1, {|Mul[int n2,{|AExpr... xs|}], AExpr... ys|}]:
    => Mul[n1*n2,(xs ++ ys)]

reduce Mul[int n1, {|Sum{|AExpr... xs|}, AExpr... ys|}]:
    => let ys = {| Mul[n1, (x ++ ys)] | x in xs |}
       in Sum(ys)

// ====================================================================
// Sum
// ====================================================================

term Sum[int,{|AExpr...|}]

reduce Sum[int n, {||}]:
    => Num(n)

reduce Sum[int n, {|AExpr x, AExpr... rest|}]:
    => Sum [n,Mul[1,{|x|}] ++ rest], if !(x is Mul || x is Sum || x is Num)

reduce Sum[int x, {|Num(int y), AExpr... rest|}]:
    => Sum[x+y,rest]

reduce Sum[int x, {|Sum[int y, {|AExpr... ys|}], AExpr... xs|}]:
    => Sum[x+y, xs ++ ys]

// ====================================================================
// Arithmetic Exprssions
// ====================================================================

term Num(int)

class Value as Num | ...
class AExpr as Num | Var | Sum | Mul | ...
   
// ====================================================================
// General Expressions
// ====================================================================

class Expr as AExpr | ...