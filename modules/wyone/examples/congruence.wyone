// ====================================================================
// Boolean Expressions
// ====================================================================
term True
term False
class Bool as True | False
class BExpr as Bool | And | Equals

term And{BExpr...}

rewrite And{True x}:
    => True

rewrite And{BExpr x}:
    => x

rewrite And{False, BExpr... xs}:
    => False

// ====================================================================
// Congruence
// ====================================================================
term Equals{|Expr,Expr|}

rewrite Equals{|Num(int x), Num(int y)|}:
    => True, if x == y
    => False, if x != y

rewrite Equals{|Expr x, Expr y|}:
    => True, if x == y
    => Equals{|Num(0),Sum{|x,Neg(y)|}|}, if x != Num(0) && y != Num(0)


// ====================================================================
// Neg
// ====================================================================
term Neg(Expr)

rewrite Neg(Num(int x)):
    => Num(-x)

rewrite Neg(Sum{|Expr... xs|}):
    => let ys = { Neg(x) | x in xs } // FIXME (should be bag)
       in Sum(ys)

// ====================================================================
// Sum
// ====================================================================
term Sum{|Expr|}

rewrite Sum{||}:
    => Num(0)

rewrite Sum{|Expr e|}:
    => e

rewrite Sum{|Num(int x), Expr... rest|}:
    => Sum(rest), if x == 0

rewrite Sum{|Num(int x), Num(int y), Expr... rest|}:
    => Sum (Num(x+y) ++ rest)

rewrite Sum{|Sum{|Expr... xs|}, Expr... ys|}:
    => Sum (xs ++ ys)

rewrite Sum{|Neg(Expr x), Expr y, Expr... rest|}:
    => Sum(rest), if x == y

// ====================================================================
// Expressions
// ====================================================================

term Num(int)
term Var(string)

class Expr as Num | Var | Sum