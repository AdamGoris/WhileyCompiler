// ====================================================================
// Boolean Expressions
// ====================================================================
term True
term False
class Bool as True | False
class BExpr as Bool | And | Equals | Equals

term And{BExpr...}

reduce And{BExpr x}:
    => x

reduce And{And{BExpr... xs}, BExpr... ys}:
    => And (xs ++ ys)

reduce And{Bool b, BExpr... xs}:
    => False, if b == False
    => True, if |xs| == 0
    => And (xs)

// ====================================================================
// Congruence
// ====================================================================
term Equals(Sum)

reduce Equals(Num(int x)):
    => True, if x == 0
    => False

// eliminate a variable
infer And{Equals(Sum{|Var x, Expr... xs|}) s1, Equals(Sum{|Var y, Expr... ys|}) s2, BExpr... rest}:
    => let zs = {| Neg(z) | z in ys |}, 
           s3 = Equals(Sum(zs ++ xs))
       in And ({s1,s2,s3} ++ rest), if x == y

// ====================================================================
// Neg
// ====================================================================
term Neg(Expr)

reduce Neg(Num(int x)):
    => Num(-x)

reduce Neg(Neg(Expr x)):
    => x

reduce Neg(Sum{|Expr... xs|}):
    => let ys = {| Neg(x) | x in xs |}
       in Sum(ys)

// ====================================================================
// Sum
// ====================================================================
term Sum{|Expr|}

reduce Sum{|Num(int x) n, Expr... rest|}:
    => Sum(rest), if x == 0 && |rest| > 0
    => n, if |rest| == 0

reduce Sum{|Num(int x), Num(int y), Expr... rest|}:
    => Sum (Num(x+y) ++ rest)

reduce Sum{|Sum{|Expr... xs|}, Expr... ys|}:
    => Sum (xs ++ ys)

reduce Sum{|Neg(Expr x), Expr y, Expr... rest|}:
    => Sum(rest), if x == y && |rest| > 0
    => Num(0), if x == y

// ====================================================================
// Expressions
// ====================================================================

term Num(int)
term Var(string)

class Expr as Num | Var | Neg | Sum