include "logic.wyone"
include "sets.wyone"

// ====================================================================
// ForAll
// ====================================================================

term ForAll[{[Var,SExpr]...}, BExpr]

reduce ForAll[{[Var,SExpr]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce ForAll[{[Var,SExpr]...} xs, ForAll[{[Var,SExpr]...} ys, BExpr e]]:
       => ForAll[xs++ys,e]

reduce Not(ForAll[{[Var,SExpr]...} vars, BExpr be]):
       => Exists[vars, Not(be)]

reduce ForAll[{[Var qv, Set{Expr... vs}], [Var,SExpr]... qs}, BExpr be]:
       => True, if |vs| == 0
       => And { ForAll[qs, be[qv \ v]] | v in vs }

reduce And { 
       	   SubsetEq[Set{Expr... vs}, SExpr src] s, 
	   ForAll[{[Var qv, SExpr src], [Var,SExpr]... qs}, BExpr be] f,
	   BExpr... bs }:
       => And ({s,f} ++ {ForAll[qs, be[qv \ v]] | v in vs } ++ bs)

infer ForAll[{[Var,SExpr]...} vs, Or{BExpr... bs}]:
       => let es = { ForAll[vs, b] | b in bs }
          in Or(es)

// ====================================================================
// Exists
// ====================================================================

term Exists[{[Var,SExpr]...}, BExpr]

reduce Exists[{[Var,SExpr]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce Exists[{[Var,SExpr]...} xs, Exists[{[Var,SExpr]...} ys, BExpr e]]:
       => Exists[xs++ys,e]

reduce Not(Exists[{[Var,SExpr]...} vars, BExpr be]):
       => ForAll[vars, Not(be)]

reduce And{Exists[{[Var,SExpr]...} vs, BExpr e], BExpr... es}:
       => Exists[vs, And(e++es)]

infer Exists[{[Var qv, Set{Expr... vs}], [Var,SExpr]... qs}, BExpr be]:
       => False, if |vs| == 0
       => Or { Exists[qs, be[qv \ v]] | v in vs }

// ====================================================================
// Expressions & Values
// ====================================================================

define BExpr as ForAll | Exists | ...




