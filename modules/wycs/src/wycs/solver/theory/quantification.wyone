include "logic.wyone"
include "sets.wyone"

// ====================================================================
// ForAll
// ====================================================================

term ForAll[{[Var,Type]...}, BExpr]

reduce ForAll[{[Var,Type]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce ForAll[{[Var,Type]...} xs, ForAll[{[Var,Type]...} ys, BExpr e]]:
       => ForAll[xs++ys,e]

reduce Not(ForAll[{[Var,Type]...} vars, BExpr be]):
       => Exists[vars, Not(be)]

// quantifier instantiation
infer ForAll[{[Var v,Type], [Var,Type]...}, 
      Or{
        And{Not(SubsetEq(Set{Var w, Expr...})), BExpr...},
	And{SubsetEq(Set{Expr u, Expr...}), BExpr rs},
	BExpr... rest}]:
       => ..., if v == w

// ====================================================================
// Exists
// ====================================================================

term Exists[{[Var,Type]...}, BExpr]

reduce Exists[{[Var,Type]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce Exists[{[Var,Type]...} xs, Exists[{[Var,Type]...} ys, BExpr e]]:
       => Exists[xs++ys,e]

reduce Not(Exists[{[Var,Type]...} vars, BExpr be]):
       => ForAll[vars, Not(be)]

reduce And{Exists[{[Var,Type]...} vs, BExpr e], BExpr... es}:
       => Exists[vs, And(e++es)]

// ====================================================================
// Expressions & Values
// ====================================================================

define BExpr as ForAll | Exists | ...




