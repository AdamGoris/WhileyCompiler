include "logic.wyrl"
include "sets.wyrl"

// ====================================================================
// ForAll
// ====================================================================

term ForAll[{[Var,Type]...}, BExpr]

reduce ForAll[{[Var,Type]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce ForAll[{[Var,Type]...} xs, ForAll[{[Var,Type]...} ys, BExpr e]]:
       => ForAll[xs++ys,e]

reduce Not(ForAll[{[Var,Type]...} vars, BExpr be]):
       => Exists[vars, Not(be)]

// quantifier instantiation [EXPENSIVE]
// infer ForAll[{[Var v,Type], [Var,Type]...} vars, 
//        Or {
//         And {
//            Not(SubsetEq[Set{Var w, Expr...}, Expr r1]), 
//            SubsetEq[Set{Expr u, Expr...}, Expr r2],
//            BExpr... },
// 	BExpr... } f]:
//        => ForAll[vars,And{f,f[v\u]}], if v == w && r1 == r2

infer And{
        Not(SubsetEq[Set{VExpr,Expr...}, Expr r1]) s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, 
       	  Or{
	    And{
              SubsetEq[Set{Expr u, Expr...}, 
              Expr r2], BExpr... }, 
          BExpr... } f], BExpr... rs}:
       => And{s,ForAll[vars,f],f[v\u],rs}, if r1 == r2

infer And{
        Not(SubsetEq[Set{VExpr,Expr...}, Expr r1]) s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, 
       	  Or{
	    SubsetEq[Set{Expr u, Expr...}, Expr r2], 
          BExpr... } f], BExpr... rs}:
       => And{s,ForAll[vars,f],f[v\u],rs}, if r1 == r2


infer And{
        SubsetEq[Set{VExpr,Expr...}, Expr r1] s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, Or{ 
	  And{ 
	    Not(SubsetEq[Set{Expr u, Expr...}, Expr r2]), BExpr... }, BExpr... } f], 
        BExpr... rs}:
       => And{s,ForAll[vars,f],f[v\u],rs}, if r1 == r2

infer And{
        SubsetEq[Set{VExpr,Expr...}, Expr r1] s, 
        ForAll[{[Var v,Type], [Var,Type]...} vars, Or{ 
	  Not(SubsetEq[Set{Expr u, Expr...}, Expr r2]), BExpr... } f], 
        BExpr... rs}:
       => And{s,ForAll[vars,f],f[v\u],rs}, if r1 == r2

// ====================================================================
// Exists
// ====================================================================

term Exists[{[Var,Type]...}, BExpr]

reduce Exists[{[Var,Type]...qs}, BExpr be]:
       => be, if be is Bool || |qs| == 0

reduce Exists[{[Var,Type]...} xs, Exists[{[Var,Type]...} ys, BExpr e]]:
       => Exists[xs++ys,e]

reduce Not(Exists[{[Var,Type]...} vars, BExpr be]):
       => ForAll[vars, Not(be)]

reduce And{Exists[{[Var,Type]...} vs, BExpr e], BExpr... es}:
       => Exists[vs, And(e++es)]

// ====================================================================
// Expressions & Values
// ====================================================================

define BExpr as ForAll | Exists | ...




