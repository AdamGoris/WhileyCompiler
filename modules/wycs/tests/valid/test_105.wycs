define Map({int,int} pairs) as forall [ int i1, int i2, int v1, int v2 :
    (i1, v1) ∈ pairs &&
    (i2, v2) ∈ pairs
    ==>
      i1 != i2 ||
      v1 == v2
  ]

define List({int,int} pairs) as Map(pairs) &&
  forall [ int i, int v :
    (i, v) ∈ pairs
    ==>
      i ≥ 0 &&
      i < |pairs|
  ]

define Append({int,int} lhs, {int,int} rhs, {int,int} result) as
   List(lhs) && List(rhs) && List(result) && 
   forall [ int i, int v : (i,v) in lhs ==> (i,v) in result ] &&
   forall [ int i, int v : (i,v) in rhs ==> (i+|lhs|,v) in result ]

assert Append({(0,1),(1,2)},{(0,3)},{(0,1),(1,2),(2,3)})
