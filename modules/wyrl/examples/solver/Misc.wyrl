include "Core.wyrl"

// ====================================================================
// Tuples
// ====================================================================

term Tuple[Expr...]
term Load[TExpr,int]

reduce Load[Tuple[Expr... ls], int idx]:
    => ls[idx], if idx >= 0 && idx < |ls|

reduce Equals[Tuple[Expr... xs],Tuple[Expr... ys]]:
    => False, if |xs| != |ys|
    => let eqs = { Equals[xs[i],ys[i]] | i in 0..|xs| }
       in And(eqs)

// ====================================================================
// Null 
// ====================================================================

term Null

// ====================================================================
// String
// ====================================================================

term String(string)

// ====================================================================
// Expressions & Values
// ====================================================================

define Value as Tuple[Value...] | Null | String ...

define TExpr as VExpr | Tuple | ...

define VExpr as TupleLoad | ...

define Expr as Tuple | Fn | ...



