include "logic.wyrl"
include "numerics.wyrl"

// ====================================================================
// Set Expressions
// ====================================================================

term Set{Expr...}

reduce Equals[Set{Expr... xs},Set{Expr... ys}]:
    => False, if |xs| == 0 && |ys| != 0

// ====================================================================
// LengthOf
// ====================================================================

term LengthOf(Expr)

reduce LengthOf(Set{Value... xs}):
    => Num((real) |xs|)

reduce And{Equals[Num(real x), LengthOf(Expr v)], BExpr... rest}:
    => And (rest ++ Equals[v,Set{}]), if x == 0.0

reduce And{Equals[LengthOf(Expr v), Num(real x)], BExpr... rest}:
    => And (rest ++ Equals[v,Set{}]), if x == 0.0

reduce Equals[LengthOf(SExpr x),Num(real y)]:
    => Equals[x,Set{}], if y == 0.0

//infer ZeroLessThanEq(Sum[real c1,{|Mul[real c2,{|LengthOf(SExpr e), AExpr... rest|}]|}] s):
//    => And{ ZeroLessThanEq(s), ZeroLessThanEq(Sum[0.0,{|Mul[1.0,{|LengthOf(e)|}]|}]) }

// ====================================================================
// SubsetEq
// ====================================================================

term SubsetEq[SExpr,Expr]

reduce SubsetEq[Set{Expr... xs} s1, Set{Expr... ys} s2]:
    => True, if |xs| == 0
    => False, if |ys| == 0
    => True, if |xs| <= |ys| && no { x in xs | !(x in ys)}
    => False, if s1 is Set{Value...} && s2 is Set{Value...}

reduce SubsetEq[SExpr x, SExpr y]:
    => True, if x == y
    => True, if x is Set && |*x| == 0
    => Equals[x,y], if y is Set && |*y| == 0

// this rule could get very expensive?
infer SubsetEq[Set{Expr x, Expr... xs} s1, Set{Expr... ys} s2]:
    => let zs = { Equals[x,y] | y in ys }
       in And {Or(zs),SubsetEq[Set(xs),s2]}, if !(x is Value) && |ys| > 0

reduce And{SubsetEq[Set{Expr... xs}, * x],SubsetEq[Set{Expr... ys}, SExpr y], BExpr... rest}:
    => let zs = (xs ++ ys) 
       in And (SubsetEq[Set(zs),x] ++ rest), if x == y

reduce And{SubsetEq[SExpr x, Set{Expr... xs}],SubsetEq[SExpr y, Set{Expr... ys}], BExpr... rest}:
    => let zs = { z | z in xs, true && z in ys }
       in And (SubsetEq[x,Set(zs)] ++ rest), if x == y

infer And{SubsetEq[SExpr x, SExpr y] s1,SubsetEq[SExpr u, SExpr v] s2, BExpr... rest}:
    => And ({s1,s2,SubsetEq[x,v]} ++ rest), if y == u

infer And{SubsetEq[SExpr x, SExpr y] ss, 
          ZeroLessThanEq(Sum[real y1, {|Mul[real y2, {|LengthOf(SExpr z)|}], Mul... ys|}] s2) ieq2, 
	  BExpr... rest}:
     => let ieq3 = ZeroLessThanEq(Sum[0.0,{|(Mul[y2-1.0,{|LengthOf(z)|}])++ys|}])
        in And ({ss,ieq2,ieq3} ++ rest), if x == z && y2 > 0.0

// ====================================================================
// Expressions & Values
// ====================================================================

define Value as Set{Value...} | ...

define SExpr as VExpr | Set | ...

define BExpr as SubsetEq | ...

define VExpr as LengthOf | ...

define Expr as SExpr | ...
