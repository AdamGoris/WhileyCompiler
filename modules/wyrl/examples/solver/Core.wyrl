// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// ====================================================================
// Bool
// ====================================================================

term True
term False
define Bool as True | False

// ====================================================================
// Variables
// ====================================================================

// a variable is an "uninterpreted function"
term Var(string)

// ====================================================================
// Not
// ====================================================================

term Not(BExpr)

reduce Not(Bool b):
    => False, if b == True
    => True

reduce Not(Not(* x)):
    => x

reduce Not(And{BExpr... xs}):
    => let ys = { Not(x) | x in xs }
       in Or(ys)

reduce Not(Or{BExpr... xs}):
    => let ys = { Not(x) | x in xs }
       in And(ys)

// ====================================================================
// And
// ====================================================================

term And{BExpr...}

reduce And{BExpr x}:
    => x

reduce And{Bool b, BExpr... xs}:
    => False, if b == False
    => True, if |xs| == 0
    => And (xs)

reduce And{And{BExpr... xs}, BExpr... ys}:
    => And (xs ++ ys)

reduce And{Not(BExpr x), BExpr y, BExpr... ys}:
    => False, if x == y

// doesn't need to be an infer, but this rule can be very expensive.
infer And{Or{BExpr... xs}, BExpr... ys}:
    => let ys = { And(x ++ ys) | x in xs }
       in Or(ys)

// ====================================================================
// Or
// ====================================================================

term Or{BExpr...}

reduce Or{BExpr x}:
    => x

reduce Or{Bool b, BExpr... xs}:
    => True, if b == True
    => False, if |xs| == 0
    => Or (xs)

reduce Or{Not(BExpr x), BExpr y, BExpr... ys}:
    => True, if x == y

reduce Or{Or{BExpr... xs}, BExpr... ys}:
    => Or (xs ++ ys)

// ====================================================================
// Equality
// ====================================================================

term Equals[VExpr,Expr]

reduce Equals[VExpr x, Expr y]:
    => True, if x == y
    => False, if x != y && x is Value && y is Value

reduce And{Equals[VExpr x, Value y] eq, BExpr... bs}:
    => let cs = { b[x\y] | b in bs }
       in And (eq ++ cs)

reduce And{Equals[Value x, VExpr y] eq, BExpr... bs}:
    => let cs = { b[y\x] | b in bs }
       in And (eq ++ cs)

reduce And{Equals[VExpr x, VExpr y] eq, BExpr... bs}:
    => let cs = { b[x\y] | b in bs }
       in And (eq ++ cs)

// ====================================================================
// Expressions & Values
// ====================================================================

// The basic value is a simple boolean true or false
define Value as Bool | ...

// Variable Expressions are those which represent variables or
// sub-components thereof.
define VExpr as Var | ...

// Boolean expressions are those which can return a boolean value.
define BExpr as VExpr | Bool | And | Or | Not | Equals | ...

// General expressions (i.e. *everything*)
define Expr as Value | BExpr | ...








