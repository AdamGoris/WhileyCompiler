include "logic.wyone"
include "numerics.wyone"

// ====================================================================
// Set Expressions
// ====================================================================

term Set{Expr...}

// ====================================================================
// LengthOf
// ====================================================================
term LengthOf(Expr)

reduce LengthOf(Set{Value... xs}):
    => Num((real) |xs|)

reduce And{Equals[Num(int x), LengthOf(Expr v)], BExpr... rest}:
    => And (rest ++ Equals[v,Set{}]), if x == 0

reduce And{Equals[LengthOf(Expr v), Num(int x)], BExpr... rest}:
    => And (rest ++ Equals[v,Set{}]), if x == 0

// ====================================================================
// SubsetEq
// ====================================================================

term SubsetEq[SExpr,SExpr]

reduce SubsetEq[Set{Expr... xs} s1, Set{Expr... ys} s2]:
    => True, if |xs| <= |ys| && no { x in xs | !(x in ys)}
    => False, if s1 is Set{Value...} && s2 is Set{Value...}

// this rule could get very expensive?
reduce SubsetEq[Set{Expr x, Expr... xs} s1, Set{Expr... ys} s2]:
    => let ys = { Equals[x,y] | y in ys }
       in And {Or(ys),SubsetEq[Set(xs),s2]}
      
reduce SubsetEq[SExpr x, SExpr y]:
    => True, if x == y

reduce And{SubsetEq[Set{Expr... xs}, * x],SubsetEq[Set{Expr... ys}, SExpr y], BExpr... rest}:
    => let zs = (xs ++ ys) 
       in And (SubsetEq[Set(zs),x] ++ rest), if x == y

reduce And{SubsetEq[SExpr x, Set{Expr... xs}],SubsetEq[SExpr y, Set{Expr... ys}], BExpr... rest}:
    => let zs = { z | z in xs, true && z in ys }
       in And (SubsetEq[x,Set(zs)] ++ rest), if x == y

infer And{SubsetEq[SExpr x, SExpr y] s1,SubsetEq[SExpr u, SExpr v] s2, BExpr... rest}:
    => And ({s1,s2,SubsetEq[x,v]} ++ rest), if y == u

// ====================================================================
// Union
// ====================================================================

term Union{SExpr...}

reduce Union{Set{Expr... xs},Set{Expr... ys}, Expr... rest}:
    => Union (Set(xs++ys) ++ rest)

reduce Union{Expr e}:
    => e

// reduce ElementOf[Expr e1, Union{SExpr... xs}]:
//     => let ys = { ElementOf[e1,x] | x in xs }
//        in Or(ys)

// ====================================================================
// Intersect
// ====================================================================

term Intersect{SExpr...}

reduce Intersect{Set{Expr... xs},Set{Expr... ys}, Expr... rest}:
     => let zs = { x | x in xs, true && x in ys }
        in Set(zs)

reduce Intersect{Expr e}:
    => e

// reduce ElementOf[Expr e1, Intersect{SExpr... xs}]:
//     => let ys = { ElementOf[e1,x] | x in xs }
//        in And(ys)

// ====================================================================
// Difference
// ====================================================================

term Difference[SExpr,SExpr]

reduce Difference[Set{Expr... xs},Set{Expr... ys}]:
     => let zs = { x | x in xs, !(x in ys) }
        in Set(zs)

// ====================================================================
// Expressions & Values
// ====================================================================

define Value as Set{Value...} | ...

define SExpr as VExpr | Set | Union | ...

define BExpr as SubsetEq | ...

define VExpr as LengthOf | ...

define Expr as SExpr | ...
