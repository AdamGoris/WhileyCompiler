include "logic.wyone"
include "numerics.wyone"

// ====================================================================
// LessThan
// ====================================================================

term LessThan[Expr,Expr] // syntactic sugar
term LessThanEq[Expr,Expr] // syntactic sugar

reduce LessThan[Expr x, Expr y]:
    => Not(LessThanEq[y,x])

reduce LessThanEq[Expr x, Expr y]:
    => let negx = Mul[-1.0,{|x|}]
       in ZeroLessThanEq (Sum[0.0,{|y,negx|}])

// ====================================================================
// Inequality
// ====================================================================

term ZeroLessThanEq(AExpr) // 0 < e

reduce ZeroLessThanEq(Num(real x)):
    => True, if 0.0 <= x
    => False

reduce Not(ZeroLessThanEq(AExpr x)):
    => let negx = Mul[-1.0,{|x|}]
       in And{Not(Equals{|x,Num(0.0)|}),ZeroLessThanEq(negx)}

// reduce Not(Equation(AExpr e)):
//     => Or{ZeroLessThanEq(e),ZeroLessThanEq(Mul[-1.0,{|e|}])}

// eliminate variable from *linear* inequality
// NOTE: must be inference rule to ensure Sums are maximally reduced
// NOTE: requirement x2 < 0.0 && y2 > 0.0 ensures we are eliminating variables
infer And{ZeroLessThanEq(Sum[real x1, {|Mul[real x2, {|AExpr v1|}], Mul... xs|}] s1) ieq1, 
          ZeroLessThanEq(Sum[real y1, {|Mul[real y2, {|AExpr v2|}], Mul... ys|}] s2) ieq2, 
	  BExpr... rest}:
     => let ieq3 = ZeroLessThanEq(Sum[0.0,{|s1,s2|}])
        in And ({ieq1,ieq2,ieq3} ++ rest), if v1 == v2 && x2 < 0.0 && y2 > 0.0

// eliminate variable from *linear* equation
// NOTE: must be inference rule to ensure Sums are maximally reduced
infer And{Equation(Sum[real x1, {|Mul[real x2, {|AExpr v1|}], Mul... xs|}]) eq1, 
      ZeroLessThanEq(Sum[real y1, {|Mul[real y2, {|AExpr v2, AExpr... vs|}], Mul... ys|}]) eq2, 
	  BExpr... rest}:
     => let eq3 = eq2[v1 \ Mul[-1.0 / x2,{|Sum[x1,xs]|}]]
        in And ({eq1,eq2,eq3} ++ rest), if v1 == v2

// ====================================================================
// Expressions & Values
// ====================================================================

define BExpr as ZeroLessThanEq | ...
