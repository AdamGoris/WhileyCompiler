package wyil.util

term Var(string)

class Expr as BExpr | AExpr | SExpr

// ====================================================================
// Boolean Expressions
// ====================================================================
term True
term False
class Bool as True | False

class BExpr as Bool 
	| Not 
	| And 
	| Or 
	| Var
	| Equals
	| NotEquals 
	| LessThan
	| LessThanEq 
	| GreaterThan
	| GreaterThanEq
	| SubSet
	| SubSetEq 
	| SupSet
	| SupSetEq
	 
// ====================================================================
// Arithmetic Expressions
// ====================================================================
class AExpr as Num | Sum | Mul | Var

term Num(int)
term Neg(AExpr)
term Sum{|AExpr...|}
term Mul{|AExpr...|}
term Div[AExpr,AExpr]

rewrite Equals{|Num(int x), Num(int y)|}:
    => True, if x == y
    => False
    
rewrite LessThan[Num(int x), Num(int y)]:
    => True, if x < y
    => False

rewrite LessThanEq[Num(int x), Num(int y)]:
    => True, if x <= y
    => False
    
rewrite GreaterThan[Num(int x), Num(int y)]:
    => True, if x > y
    => False

rewrite GreaterThanEq[Num(int x), Num(int y)]:
    => True, if x >= y
    => False

// ====================================================================
// Collections
// ====================================================================
class SExpr as Set | Var
class LExpr as List | Var
class CExpr as Set | List | Var

term Set{Expr...}
term ElementOf[Expr,SExpr]

term List[Expr...]
term IndexOf[LExpr, Expr]

term Tuple[Expr...]

term LengthOf[CExpr]

// ====================================================================
// Arithmetic Inequalities
// ====================================================================
term LessThan[AExpr,AExpr]
term LessThanEq[AExpr,AExpr]
term GreaterThan[AExpr,AExpr]
term GreaterThanEq[AExpr,AExpr]

rewrite GreaterThan[AExpr x, AExpr y]:
    => LessThan[y,x]

rewrite GreaterThanEq[AExpr x, AExpr y]:
    => LessThanEq[y,x]
    
rewrite LessThan[* x, * y]:
    => False, if x == y

rewrite LessThanEq[* x, * y]:
    => True, if x == y

// bypass
rewrite And{LessThan[Num(int x), * y],LessThan[* u, Num(int v)], BExpr... rest}:
    => False, if y == u && x >= v

rewrite And{LessThan[* x, * y],LessThan[* u, * v], BExpr... rest}:
    => And ({LessThan[x,y],LessThan[u,v],LessThan[x,v]} ++ rest), if y == u && x != v && !(x is Num && v is Num)
    => False, if y == u && x == v    

// bypass
rewrite And{LessThanEq[Num(int x), * y],LessThan[* u, Num(int v)], BExpr... rest}:
    => False, if y == u && x >= v

rewrite And{LessThanEq[* x, * y],LessThan[* u, * v], BExpr... rest}:
    => And ({LessThanEq[x,y],LessThan[u,v],LessThan[x,v]} ++ rest), if y == u && x != v && !(x is Num && v is Num)
    => False, if y == u && x == v

// bypass
rewrite And{LessThan[Num(int x), * y],LessThanEq[* u, Num(int v)], BExpr... rest}:
    => False, if y == u && x >= v

rewrite And{LessThan[* x, * y],LessThanEq[* u, * v], BExpr... rest}:
    => And ({LessThan[x,y],LessThanEq[u,v],LessThan[x,v]} ++ rest), if y == u && x != v && !(x is Num && v is Num)
    => False, if y == u && x == v

// bypass
rewrite And{LessThanEq[Num(int x), * y],LessThanEq[* u, Num(int v)], BExpr... rest}:
    => False, if y == u && x > v

rewrite And{LessThanEq[* x, * y],LessThanEq[* u, * v], BExpr... rest}:
    => And ({LessThanEq[x,y],LessThanEq[u,v],LessThanEq[x,v]} ++ rest), if y == u && x != v && !(x is Num && v is Num)
    => And ({LessThanEq[x,y],LessThanEq[u,v],Equals{|x,y|}} ++ rest), if y == u && x == v && !(x is Num && v is Num)

// ====================================================================
// Equalities
// ====================================================================
term Equals{|Expr,Expr|}
term NotEquals{|Expr,Expr|}

// bypass
rewrite And{Equals{|Num(int x), * y|},Equals{|* u, Num(int v)|}, BExpr... rest}:
    => False, if y == u && x != v

rewrite And{Equals{|* x, * y|},Equals{|* u, * v|}, BExpr... rest}:
    => And ({Equals{|x,y|},Equals{|u,v|},Equals{|x,v|}} ++ rest), if y == u && !(x is Num && v is Num)

// bypass(1)
rewrite And{Equals{|Num(int x), * y|}, LessThan[* u,Num(int v)], BExpr... rest}:
    => False, if y == u && x >= v

// bypass(2)
rewrite And{Equals{|Num(int x), * y|}, LessThan[Num(int u),* v], BExpr... rest}:
    => False, if y == v && x <= u

rewrite And{Equals{|* x, * y|},LessThan[* u, * v], BExpr... rest}:
    => And ({Equals{|x,y|},LessThan[u,v],LessThan[x,v]} ++ rest), if y == u && x != v && !(x is Num && v is Num)
    => False, if y == u && x == v
    => And ({Equals{|x,y|},LessThan[u,v],LessThan[u,x]} ++ rest), if y == v && u != x && !(u is Num && x is Num)
    => False, if y == v && u == x

// bypass(1)
rewrite And{Equals{|Num(int x), * y|}, LessThanEq[* u,Num(int v)], BExpr... rest}:
    => False, if y == u && x > v

// bypass(2)
rewrite And{Equals{|Num(int x), * y|}, LessThanEq[Num(int u),* v], BExpr... rest}:
    => False, if y == v && x < u

rewrite And{Equals{|* x, * y|},LessThanEq[* u,* v], BExpr... rest}:
    => And ({Equals{|x,y|},LessThanEq[u,v],LessThanEq[x,v]} ++ rest), if y == u && x != v && !(x is Num && v is Num)
    => And ({Equals{|x,y|},LessThanEq[u,v],LessThanEq[u,x]} ++ rest), if y == v && u != x && !(u is Num && x is Num)

//rewrite And{Equals{|Tuple[*... xs], Tuple[*... ys]|}, BExpr... rest}:
//    => False, if |xs| != |ys|
//    => 

// ====================================================================
// Set Constraints
// ====================================================================
term SubSet[SExpr,SExpr]
term SubSetEq[SExpr,SExpr]
term SupSet[SExpr,SExpr]
term SupSetEq[SExpr,SExpr]

// ====================================================================
// Not
// ====================================================================
term Not(BExpr)

rewrite Not(True):
    => False

rewrite Not(False):
    => True

rewrite Not(Not(* x)):
    => x

rewrite Not(NotEquals(* x)):
    => Equals(x)
    
rewrite NotEquals(* x):
    => Not(Equals(x))

rewrite Not(LessThanEq[* x, * y]):
    => LessThan[y,x]

rewrite Not(LessThan[* x, * y]):
    => LessThanEq[y,x]

rewrite Not(And{BExpr... xs}):
    => let ys = { Not(x) | x in xs }
       in Or(ys)

rewrite Not(Or{BExpr... xs}):
    => let ys = { Not(x) | x in xs }
       in And(ys)

// ====================================================================
// And
// ====================================================================

term And{BExpr...}

rewrite And{True x}:
    => True

rewrite And{BExpr x}:
    => x

rewrite And{False, BExpr... xs}:
    => False

rewrite And{And{BExpr... xs}, BExpr... ys}:
    => And (xs ++ ys)

rewrite And{Not(BExpr x), BExpr y, BExpr... ys}:
    => False, if x == y

rewrite And{Or{BExpr... xs}, BExpr... ys}:
    => let ys = { And(x ++ ys) | x in xs }
       in Or(ys)

// ====================================================================
// Or
// ====================================================================

term Or{BExpr...}

rewrite Or{False}:
    => False

rewrite Or{BExpr x}:
    => x

rewrite Or{True, BExpr... xs}:
    => True

rewrite Or{Not(BExpr x), BExpr y, BExpr... ys}:
    => True, if x == y

rewrite Or{Or{BExpr... xs}, BExpr... ys}:
    => Or (xs ++ ys)








