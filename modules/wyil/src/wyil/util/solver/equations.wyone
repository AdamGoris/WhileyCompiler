include "logic.wyone"
include "numerics.wyone"

term Equation(Sum)

// reduce equalities involving arithmetic constructs to equations
reduce Equals{|Sum[real n, {|AExpr... xs|}], Expr y|}:
    => Equation(Sum[n,xs ++ Mul[-1.0,{|y|}]])

reduce Equals{|Mul x, Expr y|}:
    => Equation(Sum[0.0,{|x,Mul[-1.0,{|y|}]|}])

reduce Equation(Num(real n)):
    => True, if n == 0.0
    => False

// rearrange linear equation
// NOTE: must be inference rule to ensure Sums are maximally reduced
infer And{Equation(Sum[real n1, {|Mul[real n2, {|Expr e|} t], Expr... es|}]), BExpr... rest}:
     => let nes = Mul[-1.0/n2,{|Sum[n1, es]|}],
            nrest = { r[e\nes] | r in rest }
        in And (Equals{|e,nes|} ++ nrest)

// ====================================================================
// Expressions & Values
// ====================================================================

class BExpr as Equation | ...
class Expr as Equation | ...
