// ====================================================================
// Congruence
// ====================================================================

term Equals{|Expr,Expr|}

reduce Equals{|Expr x, Expr y|}:
    => True, if x == y

reduce Equals{|Value x, Value y|}:
    => False, if x != y

reduce And{Equals{|Var v, Expr e|} b1, BExpr b2, BExpr... rest}:
    => let b3 = b2[v \ e]
       in And ({b1,b3} ++ rest), if b3 != b2 && !(e is Var(string) && *e <= *v)

// ====================================================================
// Expressions & Values
// ====================================================================

class Value as ...
class BExpr as Equals | ...
