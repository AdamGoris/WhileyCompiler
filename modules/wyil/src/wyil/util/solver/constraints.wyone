include "logic.wyone"
include "collections.wyone" 

// ====================================================================
// Set Constraints
// ====================================================================

term SubSetEq[Expr,Expr]

reduce SubSetEq[Set{Expr... xs}, Set{Expr... ys}]:
    => True, if no { x in xs | !(x in ys)}
    => False

reduce SubSetEq[* x, * y]:
    => True, if x == y

reduce And{SubSetEq[Set{Expr... xs}, * x],SubSetEq[Set{Expr... ys}, * y], BExpr... rest}:
    => let zs = (xs ++ ys) 
       in And (SubSetEq[Set(zs),x] ++ rest), if x == y

reduce And{SubSetEq[* x, Set{Expr... xs}],SubSetEq[* y, Set{Expr... ys}], BExpr... rest}:
    => let zs = { z | z in xs, true && z in ys }
       in And (SubSetEq[x,Set(zs)] ++ rest), if x == y

infer And{SubSetEq[* x, * y] s1,SubSetEq[* u, * v] s2, BExpr... rest}:
    => And ({s1,s2,SubSetEq[x,v]} ++ rest), if y == u && x != v

// ====================================================================
// Boolean Expressions
// ====================================================================

class BExpr as SubSetEq | ...

// ====================================================================
// General Expressions
// ====================================================================

class Expr as Set | ...