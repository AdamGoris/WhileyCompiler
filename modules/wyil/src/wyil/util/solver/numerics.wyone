include "variables.wyone"

// ====================================================================
// Sum
// ====================================================================

term Sum{|Expr...|}

reduce Sum{|Expr e|}:
    => e

reduce Sum{|Num(int x), Expr... rest|}:
    => Sum(rest), if x == 0 && |rest| > 0

reduce Sum{|Num(int x), Num(int y), Expr... rest|}:
    => Sum (Num(x+y) ++ rest)

reduce Sum{|Expr x, Expr y, Expr... rest|}:
    => Sum (Mul{|Num(2),y|} ++ rest), if x == y

reduce Sum{|Sum{|Expr... xs|}, Expr... ys|}:
    => Sum (xs ++ ys)

reduce Sum{|Neg(Expr x), Expr y, Expr... rest|}:
    => Sum(rest), if x == y && |rest| > 0
    => Num(0), if x == y

reduce Sum{|Mul{|Num(int x), Expr... xs|}, Mul{|Num(int y), Expr... ys|}, Expr... zs|}:
    => let m = Mul(Num(x+y) ++ xs)
       in Sum (m ++ zs), if xs == ys

// ====================================================================
// Mul
// ====================================================================

term Mul{|Expr...|}

reduce Mul{|Expr e|}:
    => e

reduce Mul{|Num(int x), Expr... rest|}:
    => Mul(rest), if x == 1 && |rest| > 0
    => Num(0), if x == 0

reduce Mul{|Num(int x), Num(int y), Expr... rest|}:
    => Mul (Num(x*y) ++ rest)

reduce Mul{|Mul{|Expr... xs|}, Expr... ys|}:
    => Mul (xs ++ ys)

reduce Mul{|Sum{|Expr... xs|}, Expr... ys|}:
    => let ys = {| Mul(x ++ ys) | x in xs |}
       in Sum(ys)

// ====================================================================
// Neg
// ====================================================================
term Neg(Expr)

reduce Neg(Num(int x)):
    => Num(-x)

reduce Neg(Neg(Expr x)):
    => x

reduce Neg(Sum{|Expr... xs|}):
    => let ys = {| Neg(x) | x in xs |}
       in Sum(ys)

// ====================================================================
// Arithmetic Exprssions
// ====================================================================

term Num(int)

class AExpr as Num | Var | Sum | Mul | Neg
   
// ====================================================================
// General Expressions
// ====================================================================

class Expr as AExpr | ...
