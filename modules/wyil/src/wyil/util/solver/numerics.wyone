// ====================================================================
// Sum
// ====================================================================

term Sum{|AExpr...|}

reduce Sum{|AExpr e|}:
    => e

reduce Sum{|Num(int x), AExpr... rest|}:
    => Sum(rest), if x == 0 && |rest| > 0

reduce Sum{|Num(int x), Num(int y), AExpr... rest|}:
    => Sum (Num(x+y) ++ rest)

reduce Sum{|AExpr x, AExpr y, AExpr... rest|}:
    => Sum (Mul{|Num(2),y|} ++ rest), if x == y

reduce Sum{|Sum{|AExpr... xs|}, AExpr... ys|}:
    => Sum (xs ++ ys)

reduce Sum{|Neg(AExpr x), AExpr y, AExpr... rest|}:
    => Sum(rest), if x == y && |rest| > 0
    => Num(0), if x == y

reduce Sum{|Mul{|Num(int x), AExpr... xs|}, Mul{|Num(int y), AExpr... ys|}, AExpr... zs|}:
    => let m = Mul(Num(x+y) ++ xs)
       in Sum (m ++ zs), if xs == ys

// ====================================================================
// Mul
// ====================================================================

term Mul{|AExpr...|}

reduce Mul{|AExpr e|}:
    => e

reduce Mul{|Num(int x), AExpr... rest|}:
    => Mul(rest), if x == 1 && |rest| > 0
    => Num(0), if x == 0

reduce Mul{|Num(int x), Num(int y), AExpr... rest|}:
    => Mul (Num(x*y) ++ rest)

reduce Mul{|Mul{|AExpr... xs|}, AExpr... ys|}:
    => Mul (xs ++ ys)

reduce Mul{|Sum{|AExpr... xs|}, AExpr... ys|}:
    => let ys = {| Mul(x ++ ys) | x in xs |}
       in Sum(ys)

// ====================================================================
// Div
// ====================================================================

term Div[AExpr,AExpr]

// ====================================================================
// Neg
// ====================================================================
term Neg(AExpr)

reduce Neg(Num(int x)):
    => Num(-x)

reduce Neg(Neg(AExpr x)):
    => x

reduce Neg(Sum{|AExpr... xs|}):
    => let ys = {| Neg(x) | x in xs |}
       in Sum(ys)

// ====================================================================
// Expressions & Values
// ====================================================================

term Num(int)

class Value as Num | ...
class AExpr as Num | Var | Neg | Sum | Mul | Div | ...
class Expr as AExpr | ...
