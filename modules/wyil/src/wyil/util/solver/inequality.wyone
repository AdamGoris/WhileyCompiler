include "logic.wyone"
include "numerics.wyone"

// ====================================================================
// Inequalities
// ====================================================================

term LessThan[AExpr,AExpr]

reduce LessThan[Num(int x), Num(int y)]:
    => True, if x < y
    => False

reduce LessThan[Var x, Var y]:
    => False, if x == y

reduce Not(LessThan[* x, * y]):
    => Or{Equals{x,y},LessThan[y,x]}

reduce And{LessThan[AExpr e1, Num(int x)] ieq, LessThan[AExpr e2, Num(int y)], BExpr... rest}:
    => And (ieq ++ rest), if e1 == e2 && x < y

reduce And{LessThan[Num(int x), AExpr e1] ieq, LessThan[Num(int y), AExpr e2], BExpr... rest}:
    => And (ieq ++ rest), if e1 == e2 && x > y

infer And{LessThan[AExpr x, AExpr y] ieq1, LessThan[AExpr u, AExpr v] ieq2, BExpr... rest}:
    => let ieq3 = LessThan[x,v]
       in And ({ieq1,ieq2,ieq3} ++ rest), if y == u

infer And{Equals{AExpr x, AExpr y} ieq1, LessThan[AExpr u, AExpr v] ieq2, BExpr... rest}:
    => let ieq3 = LessThan[x,v]
       in And ({ieq1,ieq2,ieq3} ++ rest), if y == u
    => let ieq3 = LessThan[u,x]
       in And ({ieq1,ieq2,ieq3} ++ rest), if y == v

// ====================================================================
// Expressions & Values
// ====================================================================

class BExpr as LessThan | ...
class Expr as LessThan | ...
