include "logic.wyone"
include "numerics.wyone"

term LengthOf(Expr)

// ====================================================================
// Set Expressions
// ====================================================================

term Set{Expr...}
term SetVal{Value...}
term ElementOf[Expr,Expr] // lhs in rhs
term Union{Expr...}

reduce Set{Value... xs}:
    => SetVal(xs)

reduce LengthOf(SetVal{Value... xs}):
    => Num((real) |xs|)

reduce ElementOf[Value e1, SetVal{Value... es}]:
    => True, if e1 in es
    => False

reduce ElementOf[Expr e1, SetVal{Value... es}]:
    => False, if |es| == 0
    => let ns = { Equals{|e1,e2|} | e2 in es }
       in Or(ns)

reduce ElementOf[Expr e1, Set{Expr... es}]:
    => True, if e1 in es
    => False, if |es| == 0
    => let ns = { Equals{|e1,e2|} | e2 in es }
       in Or(ns)

reduce Union{Expr e}:
    => e

reduce Union{Set{Expr... xs},Set{Expr... ys}, Expr... rest}:
    => Union (Set(xs++ys) ++ rest)

reduce Union{Set{Expr... xs},SetVal{Value... ys}, Expr... rest}:
    => Union (Set(xs++ys) ++ rest)

reduce Union{SetVal{Value... xs},SetVal{Value... ys}, Expr... rest}:
    => Union (SetVal(xs++ys) ++ rest)

reduce Union{Union{Expr... xs}, Expr... rest}:
    => Union (xs ++ rest)

// ====================================================================
// List Expressions
// ====================================================================

term List[Expr...]
term ListVal[Value...]
term IndexOf[Expr,AExpr]
term Update[Expr,AExpr,Expr]

reduce List[Value... xs]:
    => ListVal(xs)

reduce LengthOf(ListVal[Value... ls]):
    => Num((real) |ls|)

reduce LengthOf(List[Expr... ls]):
    => Num((real) |ls|)

reduce ElementOf[Value e1, ListVal[Value... es]]:
    => True, if e1 in es
    => False

reduce ElementOf[Expr e1, ListVal[Value... es]]:
    => False, if |es| == 0
    => let ns = { Equals{|e1,e2|} | e2 in es }
       in Or(ns)

reduce ElementOf[Expr e1, List[Expr... es]]:
    => True, if e1 in es
    => False, if |es| == 0
    => let ns = { Equals{|e1,e2|} | e2 in es }
       in Or(ns)

reduce IndexOf[ListVal[Value... ls], Num(real rdx)]:
    => let idx = num rdx
       in ls[idx], if (den rdx == 1) && idx >= 0 && idx < |ls|

reduce IndexOf[List[Expr... ls], Num(real rdx)]:
    => let idx = num rdx
       in ls[idx], if (den rdx == 1) && idx >= 0 && idx < |ls|

reduce Update[List[Expr... ls],Num(int idx),Expr val]:
    => ls[idx = val], if idx >= 0 && idx < |ls|

// ====================================================================
// Tuple Expressions
// ====================================================================

term Tuple[Expr...]
term TupleVal[Value...]

reduce Tuple[Value... xs]:
    => TupleVal(xs)

// NOTE: could improve this by having specific indexof operator for
// the constant case.
reduce IndexOf[TupleVal[Value... ls], Num(real rdx)]:
    => let idx = num rdx
       in ls[idx], if (den rdx == 1) && idx >= 0 && idx < |ls|

// NOTE: could improve this by having specific indexof operator for
// the constant case.
reduce IndexOf[Tuple[Expr... ls], Num(real rdx)]:
    => let idx = num rdx
       in ls[idx], if (den rdx == 1) && idx >= 0 && idx < |ls|

// ====================================================================
// Record Expressions
// ====================================================================

term Record{[string,Expr]...} // NOTE: a map might be better here
term RecordVal{[string,Value]...}
term FieldOf[Expr,string]

reduce Record{[string,Value]... fields}:
    => RecordVal(fields)

reduce FieldOf[RecordVal{[string f1, Value v], * ...},string f2]:
    => v, if f1 == f2

reduce FieldOf[Record{[string f1, Expr e], * ...},string f2]:
    => e, if f1 == f2

// ====================================================================
// Expressions & Values
// ====================================================================

class Value as ListVal | SetVal | TupleVal | RecordVal | ...
class AExpr as LengthOf | IndexOf | FieldOf | ...
class BExpr as ElementOf | IndexOf | FieldOf | ...
class Expr as ListVal | SetVal | TupleVal | RecordVal | Set | List | Tuple | Record | LengthOf | IndexOf | Update | ElementOf | FieldOf | Union | ...