// ====================================================================
// Tuple Expressions
// ====================================================================

term Tuple[Expr...]
term TupleVal[Value...]

reduce Tuple[Value... xs]:
    => TupleVal(xs)

// ====================================================================
// Tuple Load
// ====================================================================

term TupleLoad[TExpr,int]

reduce TupleLoad[TupleVal[Value... ls], int idx]:
    => ls[idx], if idx >= 0 && idx < |ls|

reduce And{Equals{|Var v1, Tuple[Expr... ls]|} eq1,
           Equals{|Var v2, TupleLoad[Var v3, int idx]|} eq2, 
	   BExpr... rest}:
    => And ({eq1,Equals{|v2,ls[idx]|}} ++ rest), if v1 == v3 && idx >= 0 && idx < |ls|

// ====================================================================
// Expressions & Values
// ====================================================================

class TExpr as Var | TupleVal | Tuple
class Value as TupleVal | ...
