include "logic.wyone"
include "numerics.wyone"

// ====================================================================
// List Expressions
// ====================================================================

term List[Expr...]
term ListVal[Value...]

reduce List[Value... xs]:
    => ListVal(xs)

// ====================================================================
// List Length
// ====================================================================

reduce LengthOf(ListVal[Value... ls]):
    => Num((real) |ls|)

reduce LengthOf(List[Expr... ls]):
    => Num((real) |ls|)

// ====================================================================
// List Index
// ====================================================================

term IndexOf[Expr,AExpr] // source, index

reduce IndexOf[ListVal[Value... ls], Num(real rdx)]:
    => let idx = num rdx
       in ls[idx], if (den rdx == 1) && idx >= 0 && idx < |ls|

reduce IndexOf[List[Expr... ls], Num(real rdx)]:
    => let idx = num rdx
       in ls[idx], if (den rdx == 1) && idx >= 0 && idx < |ls|

// ====================================================================
// List ELement Of
// ====================================================================

reduce ElementOf[Expr e1, ListVal[Value... es]]:
    => True, if e1 is Value && e1 in es
    => False, if |es| == 0 || e1 is Value
    => let ns = { Equals{|e1,e2|} | e2 in es }
       in Or(ns)

reduce ElementOf[Expr e1, List[Expr... es]]:
    => True, if e1 is Value && e1 in es
    => False, if |es| == 0
    => let ns = { Equals{|e1,e2|} | e2 in es }
       in Or(ns)

// ====================================================================
// List Update
// ====================================================================

term ListUpdate[Expr,AExpr,Expr] // src index value

reduce ListUpdate[ListVal[Value... ls],Num(real rdx),Expr e]:
    => let idx = num rdx
       in List(ls[idx = e]), if (den rdx == 1) && idx >= 0 && idx < |ls|

reduce ListUpdate[List[Expr... ls],Num(real rdx),Expr e]:
    => let idx = num rdx
       in List(ls[idx = e]), if (den rdx == 1) && idx >= 0 && idx < |ls|

reduce LengthOf(ListUpdate[Expr src, Expr idx, Expr val]):
    => LengthOf(src)

// ====================================================================
// Expressions & Values
// ====================================================================

class Value as ListVal | ...
class AExpr as IndexOf | ...
class Expr as List | ListUpdate | ...
